/*
 * generated by Xtext 2.13.0
 */
package org.example.methods.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.methods.ide.contentassist.antlr.internal.InternalMethodsParser;
import org.example.methods.services.MethodsGrammarAccess;

public class MethodsParser extends AbstractContentAssistParser {

	@Inject
	private MethodsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMethodsParser createParser() {
		InternalMethodsParser result = new InternalMethodsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_2(), "rule__Attribute__Group_2__0");
					put(grammarAccess.getModelAccess().getMehtodsAssignment(), "rule__Model__MehtodsAssignment");
					put(grammarAccess.getMethodAccess().getTypeAssignment_1(), "rule__Method__TypeAssignment_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
					put(grammarAccess.getMethodAccess().getParameterAssignment_4(), "rule__Method__ParameterAssignment_4");
					put(grammarAccess.getMethodAccess().getAttributesAssignment_7(), "rule__Method__AttributesAssignment_7");
					put(grammarAccess.getParameterAccess().getParameterTypeAssignment_0(), "rule__Parameter__ParameterTypeAssignment_0");
					put(grammarAccess.getParameterAccess().getParameterNameAssignment_1(), "rule__Parameter__ParameterNameAssignment_1");
					put(grammarAccess.getAttributeAccess().getAttrTypeAssignment_0(), "rule__Attribute__AttrTypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getAttributeAssignment_1(), "rule__Attribute__AttributeAssignment_1");
					put(grammarAccess.getAttributeAccess().getValueAssignment_2_1(), "rule__Attribute__ValueAssignment_2_1");
					put(grammarAccess.getValueAccess().getValueIntAssignment_0(), "rule__Value__ValueIntAssignment_0");
					put(grammarAccess.getValueAccess().getValueOthersAssignment_1(), "rule__Value__ValueOthersAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MethodsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MethodsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
