/*
 * generated by Xtext 2.13.0
 */
package org.example.methods.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.methods.methods.Attribute;
import org.example.methods.methods.Method;
import org.example.methods.methods.MethodsPackage;
import org.example.methods.methods.Model;
import org.example.methods.methods.Value;
import org.example.methods.services.MethodsGrammarAccess;

@SuppressWarnings("all")
public class MethodsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MethodsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MethodsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MethodsPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case MethodsPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case MethodsPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MethodsPackage.PARAMETER:
				sequence_Parameter(context, (org.example.methods.methods.Parameter) semanticObject); 
				return; 
			case MethodsPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (attrType=Type attribute=ID value=Value?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (type=Type name=ID parameter=Parameter? attributes+=Attribute*)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     mehtods+=Method+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (parameterType=Type parameterName=ID)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.example.methods.methods.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MethodsPackage.Literals.PARAMETER__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MethodsPackage.Literals.PARAMETER__PARAMETER_TYPE));
			if (transientValues.isValueTransient(semanticObject, MethodsPackage.Literals.PARAMETER__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MethodsPackage.Literals.PARAMETER__PARAMETER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getParameterTypeTypeParserRuleCall_0_0(), semanticObject.getParameterType());
		feeder.accept(grammarAccess.getParameterAccess().getParameterNameIDTerminalRuleCall_1_0(), semanticObject.getParameterName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (valueInt=INT | valueOthers=ID)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
