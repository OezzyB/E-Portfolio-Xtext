/*
 * generated by Xtext 2.13.0
 */
package org.example.methods.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MethodsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.Model");
		private final Assignment cMehtodsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMehtodsMethodParserRuleCall_0 = (RuleCall)cMehtodsAssignment.eContents().get(0);
		
		//Model:
		//	mehtods+=Method*;
		@Override public ParserRule getRule() { return rule; }
		
		//mehtods+=Method*
		public Assignment getMehtodsAssignment() { return cMehtodsAssignment; }
		
		//Method
		public RuleCall getMehtodsMethodParserRuleCall_0() { return cMehtodsMethodParserRuleCall_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterParameterParserRuleCall_4_0 = (RuleCall)cParameterAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAttributesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttributesAttributeParserRuleCall_7_0 = (RuleCall)cAttributesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Method:
		//	'public' type=Type name=ID '(' parameter=Parameter? ')' '{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'public' type=Type name=ID '(' parameter=Parameter? ')' '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//parameter=Parameter?
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_0() { return cParameterParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_7() { return cAttributesAssignment_7; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_7_0() { return cAttributesAttributeParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeTypeParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cParameterNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterNameIDTerminalRuleCall_1_0 = (RuleCall)cParameterNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	parameterType=Type parameterName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterType=Type parameterName=ID
		public Group getGroup() { return cGroup; }
		
		//parameterType=Type
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }
		
		//Type
		public RuleCall getParameterTypeTypeParserRuleCall_0_0() { return cParameterTypeTypeParserRuleCall_0_0; }
		
		//parameterName=ID
		public Assignment getParameterNameAssignment_1() { return cParameterNameAssignment_1; }
		
		//ID
		public RuleCall getParameterNameIDTerminalRuleCall_1_0() { return cParameterNameIDTerminalRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrTypeTypeParserRuleCall_0_0 = (RuleCall)cAttrTypeAssignment_0.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribute:
		//	attrType=Type attribute=ID ('=' value=Value)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//attrType=Type attribute=ID ('=' value=Value)? ';'
		public Group getGroup() { return cGroup; }
		
		//attrType=Type
		public Assignment getAttrTypeAssignment_0() { return cAttrTypeAssignment_0; }
		
		//Type
		public RuleCall getAttrTypeTypeParserRuleCall_0_0() { return cAttrTypeTypeParserRuleCall_0_0; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_1_0() { return cAttributeIDTerminalRuleCall_1_0; }
		
		//('=' value=Value)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=Value
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_1_0() { return cValueValueParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	IntType | StringType | VoidType | BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntType | StringType | VoidType | BooleanType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }
		
		//VoidType
		public RuleCall getVoidTypeParserRuleCall_2() { return cVoidTypeParserRuleCall_2; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_3() { return cBooleanTypeParserRuleCall_3; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueIntAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIntINTTerminalRuleCall_0_0 = (RuleCall)cValueIntAssignment_0.eContents().get(0);
		private final Assignment cValueOthersAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueOthersIDTerminalRuleCall_1_0 = (RuleCall)cValueOthersAssignment_1.eContents().get(0);
		
		//Value:
		//	valueInt=INT | valueOthers=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//valueInt=INT | valueOthers=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueInt=INT
		public Assignment getValueIntAssignment_0() { return cValueIntAssignment_0; }
		
		//INT
		public RuleCall getValueIntINTTerminalRuleCall_0_0() { return cValueIntINTTerminalRuleCall_0_0; }
		
		//valueOthers=ID
		public Assignment getValueOthersAssignment_1() { return cValueOthersAssignment_1; }
		
		//ID
		public RuleCall getValueOthersIDTerminalRuleCall_1_0() { return cValueOthersIDTerminalRuleCall_1_0; }
	}
	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.IntType");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		//IntType:
		//	'int';
		@Override public ParserRule getRule() { return rule; }
		
		//'int'
		public Keyword getIntKeyword() { return cIntKeyword; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.StringType");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//StringType:
		//	'String';
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.VoidType");
		private final Keyword cVoidKeyword = (Keyword)rule.eContents().get(1);
		
		//VoidType:
		//	'void';
		@Override public ParserRule getRule() { return rule; }
		
		//'void'
		public Keyword getVoidKeyword() { return cVoidKeyword; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.methods.Methods.BooleanType");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		//BooleanType:
		//	'boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'boolean'
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final MethodElements pMethod;
	private final ParameterElements pParameter;
	private final AttributeElements pAttribute;
	private final TypeElements pType;
	private final ValueElements pValue;
	private final IntTypeElements pIntType;
	private final StringTypeElements pStringType;
	private final VoidTypeElements pVoidType;
	private final BooleanTypeElements pBooleanType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MethodsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMethod = new MethodElements();
		this.pParameter = new ParameterElements();
		this.pAttribute = new AttributeElements();
		this.pType = new TypeElements();
		this.pValue = new ValueElements();
		this.pIntType = new IntTypeElements();
		this.pStringType = new StringTypeElements();
		this.pVoidType = new VoidTypeElements();
		this.pBooleanType = new BooleanTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.methods.Methods".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	mehtods+=Method*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Method:
	//	'public' type=Type name=ID '(' parameter=Parameter? ')' '{'
	//	attributes+=Attribute*
	//	'}';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Parameter:
	//	parameterType=Type parameterName=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Attribute:
	//	attrType=Type attribute=ID ('=' value=Value)? ';';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Type:
	//	IntType | StringType | VoidType | BooleanType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Value:
	//	valueInt=INT | valueOthers=ID;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntType:
	//	'int';
	public IntTypeElements getIntTypeAccess() {
		return pIntType;
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}
	
	//StringType:
	//	'String';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//VoidType:
	//	'void';
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}
	
	//BooleanType:
	//	'boolean';
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
